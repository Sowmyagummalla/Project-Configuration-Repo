ssh ubuntu@13.233.173.228
     ssh ubuntu@13.232.200.196
      sudo nano /etc/ansible/hosts
      ansible all -m ping
     sudo nano /etc/ansible/hosts
      ansible all -m ping
      pwd
      sudo vi script1.sh
        sudo vi docker.yml
      ansible-playbook docker.yml --syntax-check
     ansible-playbook docker.yml
     sudo vi dockerimages.yml
     ansible-playbook  dockerimages.yml --syntax-check
     ansible-playbook  dockerimages.yml
     ansible docker-server -m command -a "docker images" -b
     ansible docker-server -m command -a "docker ps -a" -b  
     ansible docker-server -m command -a "docker exec  nexus_container cat /nexus-data/admin.password" -b
     sudo vi script2.sh
     sudo vi jenkins.yml
     ansible-playbook jenkins.yml --syntax-check
     ansible-playbook Jenkins.yml
     ansible jenkins-server -m shell -a "script2.sh" -b
     sudo vi script2.sh
     sudo vi jenkins.yml
     ansible jenkins-server -m command -a "cat /var/lib/jenkins/secrets/initialAdminPassword" -b
     ansible jenkins -m command -a "docker run -itd --name dev1 -p 2348:8080 sowmyagummalla/devops0:latest" -b
     ansible jenkins -m command -a "docker ps" -b
      ansible Nexus -m command -a "docker exec -it nexus cat /nexus-data/admin.password" -b
 ### CLUSTER CREATION COMMANDS ###
eksctl create cluster --name=devopscluster --region=ap-south-1 --zones=ap-south-1a,ap-south-1b --version=1.30 --without-nodegroup
eksctl create nodegroup --cluster=devopscluster --region=ap-south-1 --name=ekskube1-ng-public1 --node-type=t3.medium  --nodes=2 --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=cluster  --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-accessaws eks update-kubeconfig --name=devopscluster --region ap-south-1
kubectl get nodes
kubectl get pods
kubectl get svc
docker login
nano deployment.yml
nano svc.yml
kubectl apply -f deployment.yml
 kubectl apply -f svc.yml
 kubectl get deployment
 kubectl get pods -o wide
 kubectl get svc -o wide
 eksctl delete cluster --name=devopscluster --region=ap-south-1




### ARGOCD ###
eksctl create cluster --name=myargo --region=ap-south-1 --zones=ap-south-1a,ap-south-1b --version=1.30 --without-nodegroup
eksctl create nodegroup --cluster=myargo --region=ap-south-1 --name=argo-ng-public-1 --node-type=t3.medium --nodes=2 --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=cluster --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-access
aws eks update-kubeconfig --name=myargo --region=ap-south-1
eksctl utils write-kubeconfig --cluster=myargo
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
kubectl get all -n argocd
kubectl get svc -n argocd 
$env:KUBE_EDITOR='nano'
kubectl edit svc argocd-server -n argocd
kubectl get svc -n argocd
$env:ARGOCD_SERVER = kubectl get svc argocd-server -n argocd -o go-template='{{(index .status.loadBalancer.ingress 0).hostname}}'
kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
$result = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("Y0txMzRHV0s0T0k2REJMOQ=="))
echo $result
kubectl delete -n argo -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml



### HPA ###
nano deployment.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-deployment
  labels:
    app: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: c1
        image: sowmyagummalla/devops0:latest
        ports:
        - containerPort: 8080

nano svc.yml
apiVersion: v1
kind: Service
metadata:
  name: my-svc
spec:
  type: LoadBalancer
  selector:
    app: my-app
  ports:
    - port: 80
      targetPort: 8080
nano hpa.yml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: myhpa
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: my-deployment
  minReplicas: 1
  maxReplicas: 5
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 1  # Set a realistic CPU target, like 1%
kubectl apply -f hpa.yml
kubectl apply -f deployment.yml
kubectl apply -f svc.yml
kubectl get hpa
kubectl get hpa -o wide
kubectl get deployment
kubectl get svc
kubectl get pods
kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
kubectl get deployment metrics-server -n kube-system
kubectl top pods
kubectl top nodes
nano file.sh ---------- 
./file.sh
kubectl top pods
kubectl top nodes
