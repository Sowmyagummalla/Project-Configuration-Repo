======================================================== HELM  INSTALLATION  ============================================================

      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
     chmod 700 get_helm.sh
     ./get_helm.sh
     helm version
     helm repo add stable https://charts.helm.sh/stable
     helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
     helm repo update
     kubectl create namespace prometheus
     helm install stable prometheus-community/kube-prometheus-stack -n prometheus
     kubectl get pods -n prometheus
     kubectl get svc -n prometheus
    kubectl edit svc stable-kube-prometheus-sta-prometheus -n prometheus
     kubectl edit svc stable-grafana -n prometheus
     kubectl get svc -n prometheus
     kubectl get secret -n prometheus stable-grafana -o jsonpath="{.data.admin-password}" | base64 --decode; echo



================================================== ARGO CD INSTALLATION ==================================================
 kubectl create namespace argocd
  kubectl get ns
  kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
  kubectl patch svc argocd-server -n argocd -p '{"spec": {"type":"LoadBalancer"}}'
  kubectl get all -n argocd
  kubectl get svc -n argocd
  kubectl get secret argocd-initial-admin-secret -n argocd -o yaml
  echo "SXNpNXFGeFN1M1RiMWxhaw==" | base64 --decode





================================================= K8S CLUSTER MONITORING IN GRAFANA =======================================


sudo curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
sudo chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin
sudo curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
sudo mv /tmp/eksctl /usr/local/bin
sudo yum install docker -y #linux 2023
sudo usermod -aG docker ec2-user
newgrp docker
sudo chmod 777 /var/run/docker.sock
sudo service docker start
eksctl version
kubectl version
      docker --version
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh
       ./get_helm.sh
      helm version
      docker images
      sudo chmod 777 /var/run/docker.sock
      sudo service docker start
      sudo service docker status
     docker ps
     docker images
     docker pull sowmyagummalla/project1:1.0
     docker images
     docker run -itd --name tom -p 2346:8080 sowmyagummalla/project1:1.0
     docker ps
     eksctl create cluster --name=mycluster --region=ap-south-1 --version=1.30 --without-nodegroup
     aws --version
     aws configure
     eksctl create cluster --name=mycluster --region=ap-south-1 --version=1.30 --without-nodegroup
     eksctl create nodegroup --cluster=mycluster --region=ap-south-1 --name=clust-ng-public1 --node-type=t2.small  --nodes=2 --nodes-min=2 --nodes-max=4 --node-volume-size=20 --ssh-access --ssh-public-key=cluster --managed --asg-access --external-dns-access --full-ecr-access --appmesh-access --alb-ingress-access
     aws eks update-kubeconfig --name mycluster --region ap-south-1
     kubectl get pods
     kubectl get nodes
     kubectl get svc
     vi deploy-svc.yml

apiVersion: apps/v1 
kind: Deployment
metadata:
  name: regapp-deployment
  labels: 
     app: regapp

spec:
  replicas: 2 
  selector:
    matchLabels:
      app: regapp

  template:
    metadata:
      labels:
        app: regapp
    spec:
      containers:
      - name: regapp
        image: sowmyagummalla/project1:1.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1

---
apiVersion: v1
kind: Service
metadata:
  name: regapp-service
  labels:
    app: regapp 
spec:
  selector:
    app: regapp 

  ports:
    - port: 8080
      targetPort: 8080

  type: NodePort


     kubectl apply -f deploy-svc.yml
     kubectl get svc -o wide
     helm repo add stable https://charts.helm.sh/stable
     helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
     helm repo update
     kubectl create namespace prometheus
     kubectl get ns
     kubectl create namespace grafana
     kubectl delete namespace grafana
     kubectl get ns
     helm install stable prometheus-community/kube-prometheus-stack -n prometheus
     kubectl get pods -n prometheus
     kubectl get svc -n prometheus
     kubectl edit svc stable-kube-prometheus-sta-prometheus -n prometheus
     kubectl edit svc stable-grafana -n prometheus
     kubectl get svc -n prometheus
     kubectl get secret -n prometheus stable-grafana -o jsonpath="{.data.admin-password}" | base64 --decode; echo
     eksctl delete cluster --name mycluster --region ap-south-1
